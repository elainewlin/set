{"version":3,"sources":["constants.js","components/Card.js","Set.js","App.js","serviceWorker.js","index.js"],"names":["COLORS","FILLS","SHAPES","NUMBERS","Card","props","onClick","bind","this","selectCard","card","number","color","fill","shape","image","url","shapes","i","key","push","className","src","alt","isSelected","isHighlighted","getShapes","React","Component","PROPERTIES","createCard","params","id","isSet","cards","property","values","map","c","length","value","isAllSame","seen","v","isAllDifferent","MESSAGES","App","state","selected","highlighted","deck","table","message","baseState","findSet","flipMoreCards","newGame","DECK","shuffle","shuffledDeck","slice","setState","remainingDeck","setupBoard","filter","includes","forEach","newCard","pop","index","indexOf","replaceSelected","element","remove","x","setTimeout","validateSet","j","k","combination","numCardsToFlip","Math","min","renderCards","renderMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.428efa67.chunk.js","sourcesContent":["export const COLORS = [\"red\", \"green\", \"blue\"];\nexport const FILLS = [\"solid\", \"striped\", \"open\"];\nexport const SHAPES = [\"oval\", \"diamond\", \"squiggle\"];\nexport const NUMBERS = [1, 2, 3];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {COLORS, FILLS, SHAPES, NUMBERS} from \"../constants\";\nimport '../styles/Card.css';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.props.selectCard(this.props.card);\n  }\n\n  getShapes() {\n    const {number, color, fill, shape} = this.props.card;\n    const image = `${shape}_${fill}_${color}`\n    const url = `./assets/${image}.svg`;\n    const shapes = [];\n    for (let i = 0; i < number; i++) {\n      const key = `${url}_${i}`\n      shapes.push(<img className=\"Shape\" src={url} key={key} alt={image} />)\n    }\n    return shapes;\n  }\n\n  render() {\n    const {isSelected, isHighlighted} = this.props;\n\n    let className = \"Card\";\n    if (isSelected) {\n      className = `${className} selected`;\n    } else if (isHighlighted) {\n      className = `${className} highlighted`;\n    }\n\n    return (\n      <div className={className} onClick={this.onClick}>\n        {this.getShapes()}\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  card: PropTypes.shape({\n    color: PropTypes.oneOf(COLORS),\n    fill: PropTypes.oneOf(FILLS),\n    shape: PropTypes.oneOf(SHAPES),\n    number: PropTypes.oneOf(NUMBERS),\n    id: PropTypes.string\n  }),\n  selectCard: PropTypes.func,\n  isSelected: PropTypes.bool,\n  isHighlighted: PropTypes.bool\n}\nexport default Card;","/** SET specific logic */\nimport { COLORS, FILLS, SHAPES, NUMBERS } from \"./constants\";\nimport { shuffle } from \"lodash\";\n\nconst PROPERTIES = [\"color\", \"fill\", \"shape\", \"number\"];\n\nconst createCard = (params) => {\n  const {color, fill, shape, number} = params;\n  const id = `${color}_${fill}_${shape}_${number}`;\n  return { color, fill, shape, number, id };\n}\n\nconst shuffledDeck = () => {\n  const DECK = [];\n\n  for (const color of COLORS) {\n    for (const fill of FILLS) {\n      for (const shape of SHAPES) {\n        for (const number of NUMBERS) {\n          const card = createCard({color, fill, shape, number});\n          DECK.push(card);\n        }\n      }\n    }\n  }\n\n  return shuffle(DECK);\n}\n\n/** Check if all values are the same */\nconst isAllSame = values => {\n  if (values.length === 0) return false;\n  const value = values[0];\n\n  for (let v of values) {\n    if (v !== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/** Check if all values are different */\nconst isAllDifferent = values => {\n  const seen = {};\n  for (let v of values) {\n    if (v in seen) {\n      return false;\n    }\n    seen[v] = true;\n  }\n  return true;\n};\n\n/**\n * Given a set of 3 cards, check whether or not it's a set\n * @param cards: 3 cards\n * @returns boolean\n */\nconst isSet = cards => {\n  for (let property of PROPERTIES) {\n    const values = cards.map(c => c[`${property}`]);\n    const valid = isAllSame(values) || isAllDifferent(values);\n    if (!valid) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport { \n  createCard,\n  shuffledDeck,\n  isAllSame,\n  isAllDifferent,\n  isSet\n};\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport \"./styles/App.css\";\nimport { shuffledDeck, isSet } from \"./Set\";\nimport { includes, remove } from \"lodash\";\n\nconst CARDS_ON_TABLE = 12;\nconst CARDS_IN_SET = 3;\n\nconst MESSAGES = {\n  INVALID_SET: \"Not a set\",\n  NO_SET_FOUND: \"No set found on the board. Flip more cards.\",\n  EMPTY_DECK: \"No more cards in deck. Start a new game.\"\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: [], // User selected\n      highlighted: [], // Computer finds a set\n      deck: [],\n      table: [],\n      message: null\n    };\n    this.baseState = this.state;\n\n    this.selectCard = this.selectCard.bind(this);\n    this.findSet = this.findSet.bind(this);\n    this.flipMoreCards = this.flipMoreCards.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  setupBoard() {\n    const deck = shuffledDeck();\n    const table = deck.slice(0, CARDS_ON_TABLE);\n    this.setState({ table: table });\n\n    const remainingDeck = deck.slice(\n      CARDS_ON_TABLE,\n      deck.length\n    );\n    this.setState({ deck: remainingDeck });\n  }\n\n  componentDidMount() {\n    this.setupBoard();\n  }\n\n  newGame() {\n    this.setState(this.baseState);\n    this.setupBoard();\n  }\n\n  replaceSelected(selected) {\n    let table = this.state.table.slice();\n    const deck = this.state.deck.slice();\n\n    // We flipped another row of cards.\n    if (table.length > CARDS_ON_TABLE) {\n      table = table.filter(card => !selected.includes(card));\n      return this.setState({table, deck});\n    }\n\n    selected.forEach(card => {\n      const newCard = deck.pop();\n      const index = table.indexOf(card);\n      table[index] = newCard;\n    });\n    // Handle end of game when deck runs out of cards.\n    table = table.filter(card => !!card);\n\n    this.setState({ table, deck });\n  }\n\n  validateSet(selected) {\n    if (isSet(selected)) {\n      this.replaceSelected(selected);\n      this.setState({ selected: [], message: null });\n    } else {\n      this.setState({ selected: [], message: MESSAGES.INVALID_SET });\n    }\n  }\n\n  selectCard(element) {\n    const selected = this.state.selected.slice();\n    if (includes(selected, element)) {\n      remove(selected, x => x === element);\n    } else {\n      selected.push(element);\n    }\n\n    this.setState({ selected, highlighted: [] });\n\n    if (selected.length === CARDS_IN_SET) {\n      setTimeout(() => this.validateSet(selected), 100);\n    }\n  }\n\n  renderCards() {\n    return this.state.table.map(card => {\n      const isSelected = includes(this.state.selected, card);\n      const isHighlighted = includes(this.state.highlighted, card);\n      return (\n        <Card\n          card={card}\n          selectCard={this.selectCard}\n          isSelected={isSelected}\n          isHighlighted={isHighlighted}\n          key={card.id}\n        />\n      );\n    });\n  }\n\n  renderMessage() {\n    const {message} = this.state;\n    if (!message) return;\n    return (<div>{message}</div>);\n  }\n\n  findSet() {\n    const table = this.state.table.slice();\n    for (let i = 0; i < table.length; i++) {\n      for (let j = i + 1; j < table.length; j++) {\n        for (let k = j + 1; k < table.length; k++) {\n          const combination = [table[i], table[j], table[k]];\n          if (isSet(combination)) {\n            return this.setState({\n              highlighted: combination,\n              selected: []\n            });\n          }\n        }\n      }\n    }\n    // No available sets\n    this.setState({\n      selected: [],\n      message: MESSAGES.NO_SET_FOUND\n    })\n  }\n\n  flipMoreCards() {\n    const table = this.state.table.slice();\n    const deck = this.state.deck.slice();\n\n    if (deck.length === 0) {\n      return this.setState({\n        message: MESSAGES.EMPTY_DECK\n      })\n    }\n\n    const numCardsToFlip = Math.min(3, deck.length);\n    for (let i = 0; i < numCardsToFlip; i++) {\n      const newCard = deck.pop();\n      table.push(newCard);\n    }\n\n    this.setState({ table, deck, message: null });\n  }\n\n  render() {\n    const {deck} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"Sidebar\">\n          <button className=\"Button\" onClick={this.newGame}>\n            New Game\n          </button>\n          <button className=\"Button\" onClick={this.findSet}>\n            Find Set\n          </button>\n          <button className=\"Button\" onClick={this.flipMoreCards}>\n            Flip More Cards\n          </button>\n          <div>\n            Cards in deck: {deck.length}\n          </div>\n        </div>\n        <div className=\"RightPanel\">\n          <div className=\"Grid\">\n            {this.renderCards()}\n          </div>\n          {this.renderMessage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}